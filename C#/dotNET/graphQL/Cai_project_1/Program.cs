using App.AutoGenerated;
using CAI_Project_1.Data;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Register DbContext
builder.Services.AddDbContext<DataContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.useCai();
builder.Services.AddControllers();

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseHttpsRedirection();
app.MapControllers();
app.mapCai();

app.Run();



// using App.AutoGenerated;
// using App.Data;
// using App.Features.Data;
// using App.Features.Observability;
// using App.Features.Reports;
// using App.Features.UserManagement;
// using Cai.Reporting.Features.Export;
// using Cai.Reporting;
// using HotChocolate.Data.Filters;
// using HotChocolate.Data.Filters.Expressions;
// using Scalar.AspNetCore;
// using App.Common.Extensions;
// using App.Features.CommandProcessor;


// ILogger<Program?>? logger = null;
// try
// {
//     System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

//     var builder = WebApplication.CreateBuilder(args);
//     builder.Services.AddAntiforgery(options =>
//     {
//         options.HeaderName = "X-CSRF-TOKEN";
//     });
//     builder.addCai((opts) =>
//     {
//         opts.ServiceName = builder.Environment.ApplicationName;
//     }, (gqlBuilder) =>
//     {
//         var allowIntrospection = builder.Configuration.GetSection("docs").GetValue<bool>("graphql");
//         gqlBuilder.DisableIntrospection(!allowIntrospection)
//             .AddAuthorization()
//             .ModifyRequestOptions(opt => opt.IncludeExceptionDetails = allowIntrospection)
//             .ModifyCostOptions(opt =>
//             {
//                 opt.EnforceCostLimits = false;
//             })
//             .AddMutationConventions(true)

//             .RegisterDbContextFactory<DataContext>()

//             .AddFiltering<CaseInsensitiveFilteringConvertion>()
//                     .AddConvention<IFilterConvention>(
//                         new FilterConventionExtension(
//                             x => x.AddProviderExtension(
//                                 new QueryableFilterProviderExtension(
//                                     y => y.AddFieldHandler<QueryableStringInvariantContainsHandler>()
//                                             .AddFieldHandler<QueryableStringInvariantStartsWithHandler>()
//                                             .AddFieldHandler<QueryableStringInvariantEndsWithHandler>()
//                                             .AddFieldHandler<QueryableStringInvariantEqualsHandler>()))));
//     });

//     builder.Services.AddSingleton<Cai.Reporting.IDataLoader, ReportDataLoader>();
//     builder.Services.AddSingleton<ReportRenderer>();
//     builder.Services.AddSingleton<ReportParser>();
//     builder.Services.AddSingleton<ExportService>();
//     builder.Services.AddSingleton<UserService>();

//     // replace the authContext impl. This should be overridable in a future release of cai
//     {
//         var descriptor = builder.Services.FirstOrDefault(x => x.ServiceType == typeof(AuthContext));
//         if (descriptor != null)
//         {
//             builder.Services.Remove(descriptor);
//         }

//         builder.Services.AddTransient(sp =>
//         {
//             var userService = sp.GetRequiredService<UserService>();
//             var http = sp.GetRequiredService<IHttpContextAccessor>();
//             return new AuthContext(http, userService);
//         });
//     }


//     builder.Services.addData(builder.Configuration);
//     builder.addAuthentication();

//     builder.Services.AddHostedService(p => p.GetService<UserService>()!);

//     builder.Services.AddOpenApi();
//     builder.Services.AddCors();

//     builder.Services.AddSingleton<ICommandTokenGenerator, CommandTokenGenerator>();
//     builder.Services.AddKeyedSingleton<ICommandSerializer, GenerateReport>(nameof(GenerateReport));
//     builder.Services.AddSingleton<ExternalCommandService>();


//     var app = builder.Build();
//     logger = app.Services.GetRequiredService<ILogger<Program>>();

//     app.migrateDb();
//     app.setupServices();

//     if (builder.Configuration.GetSection("docs").GetValue<bool>("openapi") || app.Environment.IsDevelopment())
//     {
//         app.MapOpenApi();
//         app.MapScalarApiReference("/.docs/v1", opts =>
//         {
//             opts.WithTitle("Cai_project_1 Docs");
//             opts.WithTheme(ScalarTheme.Default);
//             opts.WithSidebar(true);
//             opts.WithPreferredScheme("Bearer");
//             opts.WithDefaultHttpClient(ScalarTarget.CSharp, ScalarClient.HttpClient);
//         });
//     }

//     app.MapGet("/", () => $"Cai_project_1 Here. It is {DateTimeOffset.UtcNow}");

//     app.UseHttpsRedirection();
//     app.UseAuthorization();
//     app.UseAntiforgery();
//     app.useCors();
//     app.useCai();

//     logger.LogInformation("App is starting");
//     await app.RunAsync();
// }
// catch (Exception e)
// {
//     logger?.LogCritical(e, "Unhandled exception");
//     throw;
// }
// finally
// {
//     logger?.LogInformation("Shut down complete");
// }
