// <auto-generated />
using System;
using System.Text.Json;
using App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250407103451_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Data.Dashboard", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<JsonDocument>("formDefinition")
                        .HasColumnType("jsonb");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("viewer")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("id");

                    b.ToTable("dashboards");
                });

            modelBuilder.Entity("App.Data.Department", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("departments");
                });

            modelBuilder.Entity("App.Data.EmailTemplate", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isSystemTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("active");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("emailTemplates");
                });

            modelBuilder.Entity("App.Data.QueuedReport", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("filename")
                        .HasColumnType("text");

                    b.Property<string>("filterJson")
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("outputFormat")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<long>("reportId")
                        .HasColumnType("bigint");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("active");

                    b.HasIndex("reportId");

                    b.HasIndex("status");

                    b.HasIndex("userId");

                    b.ToTable("queuedReports");
                });

            modelBuilder.Entity("App.Data.QueuedReportFeed", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("requestId")
                        .HasColumnType("bigint");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("requestId");

                    b.HasIndex("userId");

                    b.ToTable("queuedReportFeeds");
                });

            modelBuilder.Entity("App.Data.ReportDefinition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("formDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("parameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("renderer")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("reportDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("reportDefinitions");
                });

            modelBuilder.Entity("App.Data.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<long[]>("dashboards")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<long[]>("reports")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("App.Data.ServiceFeed", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("service");

                    b.ToTable("serviceFeeds");
                });

            modelBuilder.Entity("App.Data.SmsTemplate", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isSystemTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("active");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("smsTemplates");
                });

            modelBuilder.Entity("App.Data.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<long?>("activeDashboardId")
                        .HasColumnType("bigint");

                    b.Property<string>("contactNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("departmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<long>("roleId")
                        .HasColumnType("bigint");

                    b.Property<string>("staffNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("statusId")
                        .HasColumnType("bigint");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("id");

                    b.HasIndex("activeDashboardId");

                    b.HasIndex("departmentId");

                    b.HasIndex("roleId");

                    b.HasIndex("statusId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("App.Data.UserFeed", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("entityId")
                        .HasColumnType("bigint");

                    b.Property<string>("entityType")
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("userFeeds");
                });

            modelBuilder.Entity("App.Data.UserStatus", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("revision")
                        .HasColumnType("integer");

                    b.Property<string>("updatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("updatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("userStatuses");
                });

            modelBuilder.Entity("App.Data.QueuedReport", b =>
                {
                    b.HasOne("App.Data.ReportDefinition", "report")
                        .WithMany()
                        .HasForeignKey("reportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("report");

                    b.Navigation("user");
                });

            modelBuilder.Entity("App.Data.QueuedReportFeed", b =>
                {
                    b.HasOne("App.Data.QueuedReport", "request")
                        .WithMany()
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("request");

                    b.Navigation("user");
                });

            modelBuilder.Entity("App.Data.User", b =>
                {
                    b.HasOne("App.Data.Dashboard", "activeDashboard")
                        .WithMany()
                        .HasForeignKey("activeDashboardId");

                    b.HasOne("App.Data.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Data.UserStatus", "status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("activeDashboard");

                    b.Navigation("department");

                    b.Navigation("role");

                    b.Navigation("status");
                });

            modelBuilder.Entity("App.Data.UserFeed", b =>
                {
                    b.HasOne("App.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
